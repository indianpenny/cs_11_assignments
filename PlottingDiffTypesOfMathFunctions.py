"""
Created on Jan 30 14:37:20 2023

@author: Srishti
"""

#Plot the following functions:

#A payment function with a parameter of amount owing that calculates the total amount that should be payed including a tip, using 15% of the amount as the tip and adding it on the the amount. 
#Generate values for payments on amounts from $20 to $100 in increments of $5. 
 

#A current function with a parameter of resistance that calculates the current for a constant voltage V of 120 V. Use V=IR.
#Generate values from 100 Ω to 1000 Ω at intervals of 100 Ω.
 

#A population function with a parameter of time that calculates the population of Surrey t years from now, using an initial population P0 of 550000 and a growth rate r of 9% (0.09). 
#\large P=P_0\left(1+r\right)^t
#Generate values for the population from t = 0 to 20 using increments of 2 years.
 

#A distance function with a parameter time that calculates the distance for a ball thrown upward with an initial upward vertical velocity v0 of 15 m/s using the acceleration a of -9.8 m/s2.  
#\large d=v_0t+\frac{1}{2}at^2
#Generate values for distance from t = 0 to 10 in 1 second increments.
#Create a 2 by 2 grid to fit the 4 graphs and plot each graph using the data generated by your functions. Submit a link to the code, as well as the image file created.

import matplotlib.pyplot as plt

# "Payment vs Amount Owed" function (top left graph)
def payment(owe):
  #pay = owe * (1+r) with r = 0.15
  pay = owe*1.15
  return pay

# "Population vs Time" function (top right graph)
def population(time):
  #pop = p0 * (1+r)^time with p0 = 550,000 and r = 0.09 
  #p0 is initial population of Surrey
  pop = 550000*((1+0.09)**time)
  return pop

# "Current vs Resistance" function (bottom left graph)
def current(R):
  # I = V/R with V = 120 
  I = 120/R # current = voltage / resistance 
  return I

# "Distance vs Time" function (bottom right graph)
def distance(time):
  #d = v0*time + 0.5*a * time^2 with v0 = 15 and a = -9.8
  #v0 is initial velocity and a is acceleration
  d = (15*time) + (0.5*-9.8*(time**2))
  return d

# Generate payments based on owed values from $20 to $100 (inclusive), in $5 increments
o_vals = [o for o in range(20,101,5)]
pay_vals = [payment(o) for o in o_vals]

# Generate population based on time from 0 to 20 years (inclusive), in 2 year increments
time_vals = [t for t in range(0,21,2)]
pop_vals = [population(t) for t in time_vals]

# Generate current based on resistance from 100 Ω to 1000 Ω (inclusive), in 100 Ω intervals
R_vals = [r for r in range(100, 1001, 100)]
I_vals = [current(r) for r in R_vals]

# Generate distance based on time from 0 to 10 seconds (inclusive), in 1 second increments
time_vals2 = [t for t in range(11)]
dist_vals = [distance(t) for t in time_vals2]

# create a figure to add subplots to
fig = plt.figure()

# 2 by 2 grid, plot at position 1
fig.add_subplot(2,2,1)
plt.plot(o_vals,pay_vals, 'b.') # blue colored dot data

# 2 by 2 grid, plot at position 2
fig.add_subplot(2,2,2)
plt.plot(time_vals, pop_vals, 'r.') # red colored dot data

# 2 by 2 grid, plot at position 3
fig.add_subplot(2,2,3)
plt.plot(R_vals, I_vals, 'g.') # green colored dot data

# 2 by 2 grid, plot at position 4
fig.add_subplot(2,2,4)
plt.plot(time_vals2, dist_vals, 'y.') # yellow colored dot data

fig.savefig('plot.png')